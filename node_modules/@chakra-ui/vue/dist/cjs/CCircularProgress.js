"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./index-60c8e38a.js"),t=require("@emotion/css");require("./index-7fafe605.js");var r=require("./CBox.js"),a=Object.freeze(["\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n"]),s=Object.freeze(["\n  0% {\n    stroke-dasharray: 1, 400;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 400, 400;\n    stroke-dashoffset: -100;\n  }\n\n  100% {\n    stroke-dasharray: 400, 400;\n    stroke-dashoffset: -300;\n  }\n"]),n=t.keyframes(s),o=t.keyframes(a);var i={name:"CCircularProgressLabel",mixins:[e.createStyledAttrsMixin("CCircularProgressLabel")],computed:{componentStyles:function(){return{position:"absolute",left:"50%",top:"50%",lineHeight:"1",transform:"translate(-50%, -50%)",fontSize:"0.25em"}}},render:function(e){return e(this.as,{class:[this.className],style:{fontVariantNumeric:"tabular-nums"},attrs:this.computedAttrs},this.$slots.default)}},l={name:"CCircularProgress",functional:!0,inject:["$chakraColorMode"],props:{size:{type:String,default:"48px"},max:{type:Number,default:100},min:{typs:Number,default:0},isIndeterminate:Boolean,isTransitioned:{type:Boolean,default:!0},thickness:{type:Number,default:.2},value:Number,angle:{type:Number,default:0},capIsRound:Boolean,trackColor:{type:String,default:"gray"},color:{type:String,default:"blue"}},render:function(e,t){var a=t.data,s=t.injections,i=t.props,l=t.slots,c=s.$chakraColorMode(),u={light:i.trackColor+".100",dark:"whiteAlpha.300"},d={light:i.color+".500",dark:i.color+".200"},f=function(e){var t=e.min,r=e.max,a=e.size,s=e.value,i=e.angle,l=e.thickness,c=e.trackColor,u=e.color,d=e.capIsRound,f=e.isIndeterminate,m=e.isTransitioned,p=100*Math.PI,h=Math.round(1e3*p)/1e3,k=100/(1-l/2),g=k/2+" "+k/2+" "+k+" "+k,C=l/2*k,y=(1-(s-t)/(r-t))*p;function b(e){var t=e.thickness,r=e.offset,a=e.color;return Object.assign({},{color:a,fill:"transparent",stroke:"currentColor"},m&&{transition:"all 250ms"},{"stroke-width":t,"stroke-dasharray":h,"stroke-dashoffset":r,cx:k,cy:k,r:50})}return{rootData:{width:"1em",height:"1em",fontSize:a,display:"inline-block",position:"relative",verticalAlign:"middle",role:"progressbar","aria-valuemin":t,"aria-valuemax":r,"aria-valuenow":f?null:s},svgData:Object.assign({},{viewBox:g,verticalAlign:"top",transform:"rotate3d(0, 0, 1, "+(i-90)+"deg)",width:"100%",height:"100%"},f&&{transformOrigin:"50% 50%",animation:o+" 2s linear infinite"}),trackCircleData:b({thickness:C,offset:0,color:c}),indicatorCircleData:Object.assign({},d&&{strokeLinecap:"round"},f&&{transition:"stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease",animation:n+" 1.5s ease-in-out infinite",strokeDasharray:"1 400",strokeDashoffset:"0"},b({thickness:C,offset:y,color:u}),m&&{transition:"all 250ms"},{stroke:"currentColor"},b({thickness:C,offset:y,color:u}))}}({min:i.min,max:i.max,value:i.value,size:i.size,angle:i.angle,thickness:i.thickness,capIsRound:i.capIsRound,isIndeterminate:i.isIndeterminate,color:d[c],trackColor:u[c],isTransitioned:i.isTransitioned}),m=f.rootData,p=f.indicatorCircleData,h=f.svgData,k=f.trackCircleData;return e(r.default,Object.assign({},a,{props:i,attrs:Object.assign({},m,a.attrs,{"data-chakra-component":"CCircularProgress"})}),[e(r.default,{props:{as:"svg"},attrs:h},[e(r.default,{props:{as:"circle"},attrs:k}),e(r.default,{props:{as:"circle"},attrs:p})]),l().default])}};exports.CCircularProgress=l,exports.CCircularProgressLabel=i;
